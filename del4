<%- include("../../views/partials/user/header") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<style>
  .main-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }





  .shop-topbar {display: flex;justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }




  


  .search-form {
    display: flex;
    align-items: center;
    border: 2px solid #ccc;
    border-radius: 5px;
    overflow: hidden;
    width: 500px;
    background: white;
}

.category-dropdown {
    flex-shrink: 0; /* Prevents shrinking */
    width: auto;
    padding:1px;
}

  .search-input {
    flex: 1;
    padding: 8px 10px;
    font-size: 14px;
    border: none;
    outline: none;
    background-color: transparent;
  }

  .search-button {
    padding: 8px 15px;
    background-color: #1e918b;
    color: #fff;
    border: none;
    cursor: pointer;
    font-size: 14px;
    border-radius: 15px;
    margin-right: 5px;
    transition: background-color 0.3s, transform 0.2s;
  }

  .search-button:hover {
    background-color: #0056b3;
    transform: scale(1.05);
  }

  .sidebar {
    padding: 20px;
    border: 1px solid #ddd;
    background-color: #f9f9f9;
    border-radius: 8px;
    margin-bottom: 20px;
    width: 250px;
    text-align: center;
  }

  .filter-section {
    margin-bottom: 20px;
  }

  .filter-title {
    font-weight: bold;
    margin-bottom: 10px;
    font-size: 16px;
    color: #333;
  }

  .filter-item {
    margin: 5px 0;
  }

  .filter-item a {
    text-decoration: none;
    color: #333;
  }

  .filter-item a:hover {
    color: #007bff;
  }

  .product-list-container {
    display: flex;
    gap: 20px;
  }

  .product-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    width: calc(100% - 270px);
  }

  .product-card {
    width: calc(33.333% - 20px);
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 8px;
    text-align: center;
    position: relative;
  }

  .product-card img {
    max-width: 100%;
    height: auto;
    border-radius: 5px;
  }

  .wishlist-btn {
    position: absolute;
    top: 8px;
    right: 8px;
    background-color: rgba(237, 247, 247, 0.8);
    color: #fff;
    padding: 8px;
    border-radius: 50%;
    cursor: pointer;
  }

  .add-to-cart-btn {
    background-color: #46698f;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
    margin-top: 10px;
  }

  .pagination {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin: 20px 0;
  }

  .pagination a {
    padding: 8px 12px;
    background-color: #f0f0f0;
    border: 1px solid #ddd;
    color: #333;
    text-decoration: none;
  }

  .pagination .active {
    background-color: #007bff;
    color: #fff;
  }

  .price-filter {
    padding: 10px;
    background-color: #f9f9f9;
    border-radius: 8px;
    margin-top: 20px;
  }

  .price-filter .price-options {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .price-button {
    padding: 12px 20px;
    background-color: #f1f1f1;
    color: #333;
    border: 1px solid #ddd;
    border-radius: 30px;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
    text-align: center;
    font-size: 14px;
  }

  .price-button:hover {
    background-color: #007bff;
    color: white;
    transform: scale(1.05);
  }

  .price-button:active {
    transform: scale(0.95);
  }

  .category-brand-container {
    text-align: center;
  }

  .sorting {
    margin-left: 20px;
  }

  .sorting select {
    padding: 8px 12px;
    border-radius: 5px;
    border: 1px solid #ddd;
    font-size: 14px;
    cursor: pointer;
  }

  .sorting select:hover {
    border-color: #007bff;
  }
  .amazon-style-search {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

 /* .search-form {
    display: flex;
    border: 2px solid #ccc;
    border-radius: 5px;
    overflow: hidden;
    width: 500px;
    background: white;
    margin-right: 50px;
}  */

 .category-dropdown {
    position: relative;
    border-right: 2px solid #ccc;
    padding: 5px 10px;
    cursor: pointer;
    background: #790f0f;
} 

.category-btn {
    border: none;
    background: none;
    font-size: 12px;
    display: flex;
    align-items: center;
}

.arrow-down {
    margin-left: 5px;
}
 .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    width: 200px;
    background: white;
    border: 1px solid #ccc;
    list-style: none;
    /* padding: 5px 0; */
    display: none; 
    z-index: 100;
} 






.dropdown-menu li {
    padding: 8px 10px;
    cursor: pointer;
}

.dropdown-menu li:hover {
    background: #f0f0f0;
}

.search-input {
    flex: 1;
    padding: 10px;
    font-size: 16px;
    border: none;
    outline: none;
}

.search-button {
    background: #febd69;
    /* border: none;
    padding: 10px 15px; */
    cursor: pointer;
}

.search-button img {
    width: 20px;
}
.category-filter {
     display: block;   
    /* width: 100%; */
    padding: 8px;
    border-radius: 5px;
    background: rgb(235, 230, 230);
    border: 1px solid #ccc;
    cursor: pointer;
}
.search-form {
  display: flex;
  align-items: center;
  border: 2px solid #ccc;
  border-radius: 5px;
  overflow: hidden;
  width: 100%;
  max-width: 600px;
  background: white;
}


.category-dropdown select,
.search-input,
.search-button {
  padding: 10px;
  font-size: 16px;
  height: 100%;
}
.sform{
  display: flex;
}
.category{
  background-color: rgb(252, 220, 227);
  border-radius: 1px;
  border: 0.5px solid gray;
  border-right: none;
}



</style>

<div class="shop-topbar">
  


  <div class="sorting">
    <select id="sort-by" name="sort" onchange="window.location.href=this.value;">
        <option value="/shop?sort=popularity" <%= sortOption === 'popularity' ? 'selected' : '' %>>Popularity</option>
        <option value="/shop?sort=price_asc" <%= sortOption === 'price_asc' ? 'selected' : '' %>>Price: Low to High</option>
        <option value="/shop?sort=price_desc" <%= sortOption === 'price_desc' ? 'selected' : '' %>>Price: High to Low</option>
        <option value="/shop?sort=ratings" <%= sortOption === 'ratings' ? 'selected' : '' %>>Average Ratings</option>
        <option value="/shop?sort=featured" <%= sortOption === 'featured' ? 'selected' : '' %>>Featured</option>
        <option value="/shop?sort=new_arrivals" <%= sortOption === 'new_arrivals' ? 'selected' : '' %>>New Arrivals</option>
        <option value="/shop?sort=a_z" <%= sortOption === 'a_z' ? 'selected' : '' %>>A - Z</option>
        <option value="/shop?sort=z_a" <%= sortOption === 'z_a' ? 'selected' : '' %>>Z - A</option>
    </select>
</div>
  




  <form id="searchForm" method="GET" action="/live-search">
    <div class="sform">
      <select class="category" name="category" id="categorySelect">
        <option value="">All Categories</option>
        <% categories.forEach(cat => { %>
          <option value="<%= cat._id %>"><%= cat.name %></option>
        <% }); %>
      </select>
      <input type="text" id="searchBox" name="query" placeholder="Search products..." required>
      <button type="submit" style="background-color: palevioletred;border: 1px solid gray;border-left: none;">
        <i class="fas fa-search"></i>
      </button>
    </div>
  </form>

  
  

  
  

  
  
  

      



  


</div>

<!-- Filter for Out of Stock Products -->
<div class="filter-section">
  <label>
    <input type="checkbox" id="show-out-of-stock" onchange="toggleOutOfStock()"> Show Out of Stock Products
  </label>
</div>


        <div class="main-container">
          <section class="shop-page container">
            <div class="product-list-container">
              <aside class="sidebar">
        <div class="filter-section">
          <div class="filter-title">Categories</div>
          <div class="category-brand-container">
            
            <ul style="list-style: none; padding: 0; margin: 0;">
              <% categories.forEach(cat => { %>
                <li class="filter-item">
                  <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                    <input type="checkbox" name="category" class="category-filter" value="<%= cat._id %>" 
                      <%= selectedCategories.includes(cat._id.toString()) ? 'checked' : '' %>
                      onchange="document.getElementById('filterForm').submit()">
                    <span><%= cat.name %></span>
                  </label>
                </li>
              <% }) %>
            </ul>
            
          </form>
            
          </div>
        </div>
      </aside>
        

        


     <% 
    // Define the function in the EJS template
    function roundToFixedNumber(value, fixedNumber) {
        return Math.round(value / fixedNumber) * fixedNumber;
    }
%><main class="product-grid" id="productList">
  <% for (let i = 0; i < products.length; i++) { %>
      <div class="product-card">
          <span class="wishlist-btn">❤️</span>
          <a href="/productDetails?id=<%= products[i]._id %>">
              <img src="/uploads/re-image/<%= products[i].productImage[0] %>" alt="<%= products[i].productName %>" style="height:170px" />
              <h5><%= products[i].productName %></h5>
              <p>Brand: <%= products[i].brand %></p>
              
              

            <% 
                let salePrice = products[i].salePrice;
                let finalPrice = products[i].finalPrice || salePrice; // Ensure it falls back to salePrice if finalPrice is null
                let discountPercent = salePrice > finalPrice ? Math.round(((salePrice - finalPrice) / salePrice) * 100) : 0;
                %>

                <% if (discountPercent > 0) { %>
                    <s>₹<%= salePrice.toLocaleString('en-IN') %></s>
                    ₹<%= finalPrice.toLocaleString('en-IN') %>
                    <span style="color: red; font-weight: bold;">(<%= discountPercent %>% OFF)</span>
                <% } else { %>
                    ₹<%= salePrice.toLocaleString('en-IN') %>  <!-- If no offer, show normal price -->
                <% } %>
              </p>
            
          </a>
          <button class="add-to-cart-btn">Add to Cart</button>
      </div>
  <% } %>
</main>
</div></div>

    <!-- Pagination -->
    <div class="pagination">
      <% if (currentPage > 1) { %>
        <a class="btn" href="/shop?page=<%= currentPage - 1 %>">Prev</a>
      <% } %>

      <% for (let i = 1; i <= totalPages; i++) { %>
        <a class="btn <%= currentPage === i ? 'active' : '' %>" href="/shop?page=<%= i %>"><%= i %></a>
      <% } %>

      <% if (currentPage < totalPages) { %>
        <a class="btn" href="/shop?page=<%= currentPage + 1 %>">Next</a>
      <% } %>
    </div>
  </section>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
<script>
  
  function toggleOutOfStock() {
      let showOutOfStock = document.getElementById('show-out-of-stock').checked;
      let url = new URL(window.location.href);
      let params = new URLSearchParams(url.search);

      if (showOutOfStock) {
          params.set('outOfStock', 'true');
      } else {
          params.delete('outOfStock');
      }

      url.search = params.toString();
      window.location.href = url.toString();
  }

  // Preserve checkbox state on page reload
  document.addEventListener('DOMContentLoaded', function () {
      const params = new URLSearchParams(window.location.search);
      const showOutOfStock = params.get('outOfStock') === 'true';
      document.getElementById('show-out-of-stock').checked = showOutOfStock;
  });

 

  document.getElementById('searchForm').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    const formData = new FormData(this);
    const query = formData.get('query');
    const category = formData.get('category');

    try {
      const response = await fetch(`/live-search?query=${encodeURIComponent(query)}&category=${encodeURIComponent(category)}`);
      const products = await response.json();
      displayProducts(products);
    } catch (error) {
      console.error('Error fetching search results:', error);
    }
  });

  function displayProducts(products) {
    const productList = document.getElementById('productList');
    productList.innerHTML = ''; // Clear previous results

    if (products.length === 0) {
      productList.innerHTML = '<p>No products found.</p>';
      return;
    }

    products.forEach(product => {
      const productCard = document.createElement('div');
      productCard.className = 'product-card';
      productCard.innerHTML = `
        <span class="wishlist-btn">❤️</span>
        <a href="/productDetails?id=${product._id}">
          <img src="/uploads/re-image/${product.productImage[0]}" alt="${product.productName}" style="height:170px" />
          <h5>${product.productName}</h5>
          <p>Brand: ${product.brand}</p>
          <p>Price: ₹${product.salePrice.toLocaleString('en-IN')}
            <span class="text-muted"><strike>₹${product.regularPrice.toLocaleString('en-IN')}</strike></span>
          </p>
        </a>
        <button class="add-to-cart-btn">Add to Cart</button>
      `;
      productList.appendChild(productCard);
    });
  }



  document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.querySelector("#searchBox"); // Search input field
  const categorySelect = document.querySelector("#categorySelect"); // Category dropdown
  const productList = document.getElementById("productList");
  let debounceTimeout;

  // Function to fetch and display search results
  function fetchSearchResults() {
    const query = searchInput.value.trim();
    const category = categorySelect.value; // Get selected category

    if (!query) {
      productList.innerHTML = ""; // Clear results if input is empty
      return;
    }

    fetch(`/live-search?query=${query}&category=${category}`)
      .then(response => response.json())
      .then(data => {
        productList.innerHTML = ""; // Clear previous results

        if (data.length === 0) {
          productList.innerHTML = '<p style="text-align:center;">No products found</p>';
          return;
        }

        data.forEach(product => {
          let productItem = document.createElement("div");
          productItem.classList.add("product-card");
          productItem.innerHTML = `
            <a href="/productDetails?id=${product._id}">
              <img src="/uploads/re-image/${product.productImage[0]}" alt="${product.productName}" style="height:170px" />
              <h5>${product.productName}</h5>
              <p>Brand: ${product.brand}</p>
              <p>Price: ₹${product.salePrice.toLocaleString('en-IN')}
                <span class="text-muted"><strike>₹${product.regularPrice.toLocaleString('en-IN')}</strike></span>
              </p>
            </a>
            <button class="add-to-cart-btn">Add to Cart</button>
          `;
          productList.appendChild(productItem);
        });
      })
      .catch(error => console.error("Error fetching search results:", error));
  }

  // Debounce function to limit API calls
  function debounceFetch() {
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(fetchSearchResults, 300); // Debounce delay (300ms)
  }

  // Event listeners
  searchInput.addEventListener("input", debounceFetch); // Trigger search on input
  categorySelect.addEventListener("change", fetchSearchResults); // Update results when category changes
});



document.addEventListener("DOMContentLoaded", function () {
    const categoryFilters = document.querySelectorAll(".category-filter");

    categoryFilters.forEach((checkbox) => {
        checkbox.addEventListener("change", function () {
            let selectedCategories = [];
            categoryFilters.forEach((cb) => {
                if (cb.checked) {
                    selectedCategories.push(cb.value);
                }
            });

            let url = new URL(window.location.href);
            let params = new URLSearchParams(url.search);

            if (selectedCategories.length > 0) {
                params.set("category", selectedCategories.join(",")); // Store multiple categories
            } else {
                params.delete("category");
            }

            url.search = params.toString();
            window.location.href = url.toString(); // Refresh page with selected filters
        });
    });

    // Preserve selected checkboxes on page reload
    const urlParams = new URLSearchParams(window.location.search);
    const selectedCategories = urlParams.get("category") ? urlParams.get("category").split(",") : [];
    
    categoryFilters.forEach((checkbox) => {
        if (selectedCategories.includes(checkbox.value)) {
            checkbox.checked = true;
        }
    });
});
</script>

















</script>
<%- include("../../views/partials/user/footer") %>




const loadShoppingPage = async (req, res) => {
    try {
        const user = req.session.user;
        const userData = await User.findOne({ _id: user });
        const categories = await Category.find({ isListed: true });

        let selectedCategories = req.query.category ? req.query.category.split(",") : [];
        const sortOption = req.query.sort || "createdOn";
        const showOutOfStock = req.query.outOfStock === "true";
        const searchQuery = req.query.search || "";
        const page = parseInt(req.query.page) || 1;
        const limit = 9;
        const skip = (page - 1) * limit;

        let query = { isBlocked: false, status: "Available" };

        if (selectedCategories.length > 0) {
            query.category = { $in: selectedCategories };
        }

        if (showOutOfStock) {
            query.stock = { $lte: 0 };
        } else {
            query.stock = { $gt: 0 };
        }

        if (searchQuery) {
            query.productName = { $regex: searchQuery, $options: "i" };
        }

        let sortCriteria = {};
        switch (sortOption) {
            case "popularity": sortCriteria = { popularity: -1 }; break;
            case "price_asc": sortCriteria = { salePrice: 1 }; break;
            case "price_desc": sortCriteria = { salePrice: -1 }; break;
            case "ratings": sortCriteria = { averageRating: -1 }; break;
            case "featured": sortCriteria = { featured: -1 }; break;
            case "new_arrivals": sortCriteria = { createdOn: -1 }; break;
            case "a_z": sortCriteria = { productName: 1 }; break;
            case "z_a": sortCriteria = { productName: -1 }; break;
            default: sortCriteria = { createdOn: -1 }; break;
        }

        const products = await Product.find(query)
            .sort(sortCriteria)
            .skip(skip)
            .limit(limit)
            .populate("category");

        // Calculate final price and discount percentage
        products.forEach(product => {
            product.finalPrice = Math.round(product.finalPrice / 10) * 10; // Rounding to nearest 10
            product.discountPercent = Math.round(((product.salePrice - product.finalPrice) / product.salePrice) * 100);
        });

        const totalProducts = await Product.countDocuments(query);
        const totalPages = Math.ceil(totalProducts / limit);

        res.render("shop", {
            user: userData,
            products,
            categories,
            selectedCategories,
            totalProducts,
            currentPage: page,
            totalPages,
            showOutOfStock,
            sortOption,
            searchQuery,
        });

    } catch (error) {
        console.error("Error loading shopping page:", error);
        res.redirect("/pageNotFound");
    }
};











<!-- <h3>Admin Order List</h3>

    <table border="1">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>User name</th>
                <th>Total Price</th>
                
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <% orders.forEach(order => { %>
                <tr>
                    <td><%= order._id %></td>
                    <td><%= order.userId.name  %></td>
                    <td>₹<%= order.totalAmount %></td>
                    
                    <td><%= order.status %></td>
                    <td>
                        <a style="color:#ddd" href="/admin/orderDetails?id=<%= order._id %>">View</a> 
                        <form  id="statusForm"  action="/admin/changeOrderStatus" method="POST" style="display:inline;">
                            <input type="hidden" name="orderId" value="<%= order._id %>">
                            <select name="status" id="statusSelect">
                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                            </select>
                            <button type="submit">Update</button>
                        </form> |
                        
                        
                        
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>

    
    <div>
        <% if (currentPage > 1) { %>
            <a style="padding: 8px 12px;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            margin: 5px;" href="?page=<%= currentPage - 1 %>">Previous</a>
        <% } %>

        Page <%= currentPage %> of <%= totalPages %>

        <% if (currentPage < totalPages) { %>
            <a  style="padding: 8px 12px;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            margin: 5px;" href="?page=<%= currentPage + 1 %>">Next</a>
        <% } %>
    </div>
     

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.querySelectorAll("form").forEach(form => {
    form.addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent normal form submission

        const formData = new FormData(this);
        const orderId = formData.get("orderId");

        if (!orderId) {
            Swal.fire({
                icon: "warning",
                title: "Order ID Missing!",
                text: "Something went wrong. Please try again.",
            });
            return;
        }

        // Check if the form is for canceling an order
        if (this.getAttribute("data-action") === "cancel") {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to undo this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, cancel it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch("/admin/cancelOrder", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ orderId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            Swal.fire({
                                icon: "error",
                                title: "Oops...",
                                text: data.error,
                            });
                        } else {
                            // Update order status text dynamically
                            const statusElement = document.querySelector(`#status-${orderId}`);
                            if (statusElement) {
                                statusElement.textContent = "Cancelled";
                                statusElement.style.color = "red";
                            }

                            // Disable and hide the cancel button
                            const cancelButton = this.querySelector("button");
                            if (cancelButton) {
                                cancelButton.disabled = true;
                                cancelButton.style.display = "none";
                            }

                            Swal.fire({
                                icon: "success",
                                title: "Order Cancelled!",
                                text: "The order has been successfully cancelled.",
                                confirmButtonColor: "#3085d6",
                                confirmButtonText: "OK",
                            });
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        Swal.fire({
                            icon: "error",
                            title: "Something went wrong!",
                            text: "Please try again later.",
                        });
                    });
                }
            });
        } else {
            // Handle status update
            const status = formData.get("status");
            if (!status) {
                Swal.fire({
                    icon: "warning",
                    title: "Status Missing!",
                    text: "Please select a status before updating.",
                });
                return;
            }

            fetch("/admin/changeOrderStatus", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId, status })
            })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        icon: "success",
                        title: "Order Updated!",
                        text: "The order status has been updated successfully.",
                        confirmButtonColor: "#3085d6",
                        confirmButtonText: "OK",
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Update Failed!",
                        text: "Failed to update order status.",
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    icon: "error",
                    title: "Something went wrong!",
                    text: "Please try again later.",
                });
            });
        }
    });
});
</script>

    
    
    
</body>
</html>
<%- include("../../views/partials/admin/footer") %> -->



db.users.updateOne(
    { _id: ObjectId("67b72f7191d5dba764a17da8") },
    {
        $push: {
            cart: {
                productId: ObjectId("6792646e9f89dddfb336d167"), // Replace with a real product ID
                quantity: 1
            }
        }
    }
);


